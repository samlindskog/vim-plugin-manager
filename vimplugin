#!/bin/bash

script=$(readlink -f $0)
plugindir="$HOME/.vim/bundle"
cache="$HOME/.cache/vimplugin"

touch -a $cache
ifs="$IFS"
IFS=$'\n'
read -d '' -r -a plugindirs <<< "$(cd $plugindir; ls)"
read -d '' -r -a pluginsrc < $cache
IFS="$ifs"

function usage () {
	echo "Usage:"
	echo "vimplugin (default -h)"
	echo "vimplugin -l (list plugin remote links)"
	echo "vimplugin -i GIT-REPOSITORY (install plugin)"
	echo "vimplugin -s (sync plugins from cache)"
	echo "vimplugin -r [PLUGIN-NAME] (remove plugin, or all plugins)"
	echo "vimplugin -u [PLUGIN-NAME] (update plugin, or all plugins)"
	echo "vimplugin -h (help)"
	[[ -n $1 ]] && exit $1
	exit 0
}

function confirm () {
	while :; do
		echo "confirm $1 (y/n)? : "
		read yn
		[[ $yn = y ]] && return 1
		[[ $yn = n ]] && return 0
	done
}

function install () {	
	plugin="$(gawk 'NR==1 {\
		match($0, /^git@github\.com:.+\/(.+)\.git$/, arr);\
	  	print arr[1]}' <<< $1)"

	[[ -z $plugin ]] &&\
		echo "invalid argument. exiting." && exit 1

	for i in "${plugindirs[@]}"; do
		[[ $i = $plugin ]] && echo "plugin already installed. exiting."\
			&& exit 1
	done

	(
		cd "$plugindir"
		[[ $? != 0 ]] && exit
		git clone "$1"
		[[ $? = 0 ]] && echo $1 >> $cache
	)
	exit
}

function sync () {
	(
		cd "$plugindir"
		[[ $? != 0 ]] && exit
		for src in ${pluginsrc[@]}; do
			git clone "$src"
		done
	)
	exit
}

function gitpull () {
	(
		cd "$HOME/.vim/bundle/$1"
		[[ $? != 0 ]] && return
		git pull --ff-only
	)
}

function update () {
	[[ -n $1 ]] && {
		gitpull "$1"
		exit
	}
	for i in "${plugindirs[@]}"; do
		gitpull "$i"
	done
	exit
}

function list () {
	for i in ${plugindirs[@]}; do
		(
		cd $plugindir/$i
		gremote=$(git remote -v)
		upstreamurl=$(gawk 'NR==1 {print $2; exit}' <<< $gremote)
		echo $upstreamurl
		)
	done
	exit
}

function remove () {
	[[ -z $1 ]] && {
		confirm "remove: ${plugindirs[*]}" && exit
	}
	[[ -n $1 ]] && {
		confirm "remove: $1" && exit
	}
	rm -rf "$plugindir/$1"
	mkdir -p "$plugindir"
	exit
}

while getopts ":i:u:r:lsh" flag; do
	case $flag in
		i)
			install "$OPTARG"
			;;
		s)
			sync
			;;
		u)
			update "$OPTARG"
			;;
		l)
			list
			;;
		r)
			remove "$OPTARG"
			;;
		h)
			usage
			;;
		:)
			case "$OPTARG" in
				i)
					usage 1
					;;
				u)
					update
					;;
				r)
					remove
					;;
			esac
			;;
		*)
			usage 1
			;;
	esac
done

eval "$script -h"
exit 0
